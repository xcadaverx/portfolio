'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.mapModule = mapModule;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _resolve = require('resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _mapToRelative = require('./mapToRelative');

var _mapToRelative2 = _interopRequireDefault(_mapToRelative);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function createAliasFileMap(pluginOpts) {
    var alias = pluginOpts.alias || {};
    return Object.keys(alias).reduce(function (memo, expose) {
        return Object.assign(memo, _defineProperty({}, expose, alias[expose]));
    }, {});
}

function replaceExt(p, ext) {
    var filename = _path2.default.basename(p, _path2.default.extname(p)) + ext;
    return _path2.default.join(_path2.default.dirname(p), filename);
}

var defaultBabelExtensions = ['.js', '.jsx', '.es', '.es6'];

function mapModule(source, file, pluginOpts) {
    // Do not map source starting with a dot
    if (source[0] === '.') {
        return null;
    }

    // Search the file under the custom root directories
    var rootDirs = pluginOpts.root || [];
    for (var i = 0; i < rootDirs.length; i++) {
        try {
            // check if the file exists (will throw if not)
            var extensions = pluginOpts.extensions || defaultBabelExtensions;
            var resolvedSourceFile = _resolve2.default.sync('./' + source, { basedir: _path2.default.resolve(rootDirs[i]), extensions: extensions });
            var realSourceFileExtension = _path2.default.extname(resolvedSourceFile);
            var sourceFileExtension = _path2.default.extname(source);
            // map the source and keep its extension if the import/require had one
            var ext = realSourceFileExtension === sourceFileExtension ? realSourceFileExtension : '';
            return (0, _utils.toLocalPath)((0, _utils.toPosixPath)(replaceExt((0, _mapToRelative2.default)(file, resolvedSourceFile), ext)));
        } catch (e) {
            // empty...
        }
    }

    // The source file wasn't found in any of the root directories. Lets try the alias
    var aliasMapping = createAliasFileMap(pluginOpts);
    var moduleSplit = source.split('/');

    var aliasPath = void 0;
    while (moduleSplit.length) {
        var m = moduleSplit.join('/');
        if ({}.hasOwnProperty.call(aliasMapping, m)) {
            aliasPath = aliasMapping[m];
            break;
        }
        moduleSplit.pop();
    }

    // no alias mapping found
    if (!aliasPath) {
        return null;
    }

    // remove legacy "npm:" prefix for npm packages
    aliasPath = aliasPath.replace(/^(npm:)/, '');
    var newPath = source.replace(moduleSplit.join('/'), aliasPath);

    // alias to npm module don't need relative mapping
    if (aliasPath[0] !== '.') {
        return newPath;
    }
    // relative alias
    return (0, _utils.toLocalPath)((0, _utils.toPosixPath)((0, _mapToRelative2.default)(file, newPath)));
}

exports.default = function (_ref) {
    var t = _ref.types;

    function transformRequireCall(nodePath, state) {
        if (!t.isIdentifier(nodePath.node.callee, { name: 'require' }) && !(t.isMemberExpression(nodePath.node.callee) && t.isIdentifier(nodePath.node.callee.object, { name: 'require' }))) {
            return;
        }

        var moduleArg = nodePath.node.arguments[0];
        if (moduleArg && moduleArg.type === 'StringLiteral') {
            var modulePath = mapModule(moduleArg.value, state.file.opts.filename, state.opts);
            if (modulePath) {
                nodePath.replaceWith(t.callExpression(nodePath.node.callee, [t.stringLiteral(modulePath)]));
            }
        }
    }

    function transformImportCall(nodePath, state) {
        var moduleArg = nodePath.node.source;
        if (moduleArg && moduleArg.type === 'StringLiteral') {
            var modulePath = mapModule(moduleArg.value, state.file.opts.filename, state.opts);
            if (modulePath) {
                nodePath.replaceWith(t.importDeclaration(nodePath.node.specifiers, t.stringLiteral(modulePath)));
            }
        }
    }

    return {
        manipulateOptions: function manipulateOptions(babelOptions) {
            var _this = this;

            var findPluginOptions = babelOptions.plugins.find(function (plugin) {
                return plugin[0] === _this;
            })[1];
            if (findPluginOptions.root) {
                findPluginOptions.root = findPluginOptions.root.reduce(function (resolvedDirs, dirPath) {
                    if (_glob2.default.hasMagic(dirPath)) {
                        return resolvedDirs.concat(_glob2.default.sync(dirPath));
                    }
                    return resolvedDirs.concat(dirPath);
                }, []);
            }
        },

        visitor: {
            CallExpression: {
                exit: function exit(nodePath, state) {
                    return transformRequireCall(nodePath, state);
                }
            },
            ImportDeclaration: {
                exit: function exit(nodePath, state) {
                    return transformImportCall(nodePath, state);
                }
            }
        }
    };
};