#!/usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _path = require('path');

var _minimist = require('minimist');

var _minimist2 = _interopRequireDefault(_minimist);

var _fs = require('mz/fs');

var _server = require('../server');

var _server2 = _interopRequireDefault(_server);

var _clean = require('../server/build/clean');

var _clean2 = _interopRequireDefault(_clean);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var argv = (0, _minimist2.default)(process.argv.slice(2), {
  alias: {
    h: 'help',
    p: 'port'
  },
  boolean: ['h'],
  default: {
    p: 3000
  }
});

var dir = (0, _path.resolve)(argv._[0] || '.');

(0, _clean2.default)(dir).then((0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
  var srv;
  return _regenerator2.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          srv = new _server2.default({ dir: dir, dev: true, hotReload: true });
          _context.next = 3;
          return srv.start(argv.port);

        case 3:
          console.log('> Ready on http://localhost:%d', argv.port);

          // Check if pages dir exists and warn if not
          _context.next = 6;
          return (0, _fs.exists)((0, _path.join)(dir, 'pages'));

        case 6:
          if (_context.sent) {
            _context.next = 15;
            break;
          }

          _context.next = 9;
          return (0, _fs.exists)((0, _path.join)(dir, '..', 'pages'));

        case 9:
          if (!_context.sent) {
            _context.next = 13;
            break;
          }

          console.error('> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?');
          _context.next = 14;
          break;

        case 13:
          console.error('> Couldn\'t find a `pages` directory. Please create one under the project root');

        case 14:
          process.exit(1);

        case 15:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}))).catch(function (err) {
  console.error(err);
  process.exit(1);
});