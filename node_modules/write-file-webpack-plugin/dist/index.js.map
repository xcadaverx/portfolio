{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import _ from 'lodash';\nimport fs from 'fs';\nimport path from 'path';\nimport mkdirp from 'mkdirp';\nimport {\n    createHash\n} from 'crypto';\nimport chalk from 'chalk';\nimport moment from 'moment';\nimport filesize from 'filesize';\n\n/**\n * When 'webpack' program is used, constructor name is equal to 'NodeOutputFileSystem'.\n * When 'webpack-dev-server' program is used, constructor name is equal to 'MemoryFileSystem'.\n */\nconst isMemoryFileSystem = (outputFileSystem: Object): boolean => {\n    return outputFileSystem.constructor.name === 'MemoryFileSystem';\n};\n\n/**\n * @property test A regular expression used to test if file should be written. When not present, all bundle will be written.\n * @property useHashIndex Use hash index to write only files that have changed since the last iteration (default: true).\n * @property log Logs names of the files that are being written (or skipped because they have not changed) (default: true).\n * @property exitOnErors Stop writing files on webpack errors (default: true).\n */\ntype UserOptionsType = {\n    exitOnErrors: ?boolean,\n    test: ?RegExp,\n    useHashIndex: ?boolean,\n    log: ?boolean\n};\n\nexport default (userOptions: UserOptionsType = {}): Object => {\n    const options = _.assign({}, {\n        exitOnErrors: true,\n        log: true,\n        test: null,\n        useHashIndex: true\n    }, userOptions);\n\n    if (!_.isNull(options.test) && !_.isRegExp(options.test)) {\n        throw new Error('options.test value must be an instance of RegExp.');\n    }\n\n    if (!_.isBoolean(options.useHashIndex)) {\n        throw new Error('options.useHashIndex value must be of boolean type.');\n    }\n\n    if (!_.isBoolean(options.log)) {\n        throw new Error('options.log value must be of boolean type.');\n    }\n\n    if (!_.isBoolean(options.exitOnErrors)) {\n        throw new Error('options.exitOnErrors value must be of boolean type.');\n    }\n\n    const log = (...append) => {\n        if (!options.log) {\n            return;\n        }\n\n        /* eslint-disable no-console */\n        console.log(chalk.dim('[' + moment().format('HH:mm:ss') + '] [write-file-webpack-plugin]'), ...append);\n        /* eslint-enable no-console */\n    };\n\n    const assetSourceHashIndex = {};\n\n    log('options', options);\n\n    const apply = (compiler) => {\n        let outputPath,\n            setupDone,\n            setupStatus;\n\n        const setup = (): boolean => {\n            if (setupDone) {\n                return setupStatus;\n            }\n\n            setupDone = true;\n\n            log('compiler.outputFileSystem is \"' + chalk.cyan(compiler.outputFileSystem.constructor.name) + '\".');\n\n            if (!isMemoryFileSystem(compiler.outputFileSystem)) {\n                return false;\n            }\n\n            // https://github.com/gajus/write-file-webpack-plugin/issues/1\n            // `compiler.options.output.path` will be hardcoded to '/' in\n            // webpack-dev-server's command line wrapper. So it should be\n            // ignored here.\n            if (_.has(compiler, 'options.output.path') && compiler.options.output.path !== '/') {\n                outputPath = compiler.options.output.path;\n            }\n\n            if (!outputPath) {\n                if (!_.has(compiler, 'options.devServer.outputPath')) {\n                    throw new Error('output.path is not accessible and devServer.outputPath is not defined. Define devServer.outputPath.');\n                }\n\n                outputPath = compiler.options.devServer.outputPath;\n            }\n\n            log('compiler.options.devServer.outputPath is \"' + chalk.cyan(outputPath) + '\".');\n\n            setupStatus = true;\n\n            return setupStatus;\n        };\n\n        compiler.plugin('done', (stats) => {\n            if (!setup()) {\n                return;\n            }\n\n            if (options.exitOnErrors && stats.compilation.errors.length) {\n                return;\n            }\n\n            log('stats.compilation.errors.length is \"' + chalk.cyan(stats.compilation.errors.length) + '\".');\n\n            _.forEach(stats.compilation.assets, (asset, assetPath) => {\n                const outputFilePath = path.join(outputPath, assetPath);\n                const relativeOutputPath = path.relative(process.cwd(), outputFilePath);\n                const targetDefinition = 'asset: ' + chalk.cyan('./' + assetPath) + '; destination: ' + chalk.cyan('./' + relativeOutputPath);\n\n                if (options.test && !options.test.test(assetPath)) {\n                    log(targetDefinition, chalk.yellow('[skipped; does not match test]'));\n\n                    return;\n                }\n\n                const assetSize = asset.size();\n                const assetSource = asset.source();\n\n                if (options.useHashIndex) {\n                    const assetSourceHash = createHash('sha256').update(assetSource).digest('hex');\n\n                    if (assetSourceHashIndex[assetPath] && assetSourceHashIndex[assetPath] === assetSourceHash) {\n                        log(targetDefinition, chalk.yellow('[skipped; matched hash index]'));\n\n                        return;\n                    }\n\n                    assetSourceHashIndex[assetPath] = assetSourceHash;\n                }\n\n                log(targetDefinition, chalk.green('[written]'), chalk.magenta('(' + filesize(assetSize) + ')'));\n\n                mkdirp.sync(path.dirname(relativeOutputPath));\n\n                fs.writeFileSync(relativeOutputPath.split('?')[0], assetSource);\n            });\n        });\n    };\n\n    return {\n        apply\n    };\n};\n"]}